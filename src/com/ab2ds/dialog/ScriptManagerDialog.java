/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ab2ds.dialog;

import com.ab2ds.core.MainFrame;
import com.ab2ds.util.ScriptGenerator;
import com.falcron.core.SimpleScript;
import com.falcron.sprite.Entity;
import java.io.File;
import java.io.PrintWriter;
import java.util.Map;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.Document;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Antony
 */
public class ScriptManagerDialog extends javax.swing.JFrame {

    /**
     * Creates new form ScriptManagerDialog
     */
    private Entity entity;
    private MainFrame mainframe;
    private String currentScript;
    
    public ScriptManagerDialog(Entity entity, MainFrame mainframe) {
        initComponents();
        this.entity = entity;
        this.mainframe = mainframe;
        this.initLists();
        setLocationRelativeTo(null);
        Document doc = codearea.getDocument();
        if(doc instanceof PlainDocument){
            doc.putProperty(PlainDocument.tabSizeAttribute, 3);
        }
        setTitle(getTitle()+" - "+this.entity.name);
    }

    private File getFileFromKey(String key){
        File f = new File(mainframe.getProjectAbsPath()+"/project/src/com/scripts/"+key+".java");
        return f;
    }
    
    private void initLists(){
        DefaultListModel d = new DefaultListModel();
        for(Map.Entry<String, SimpleScript> en : entity.getScripts().entrySet()){
            d.addElement(en.getKey());
        }
        listscripts.setModel(d);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listscripts = new javax.swing.JList();
        jbtNew = new javax.swing.JButton();
        jbtSaveCompile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        codearea = new javax.swing.JEditorPane();
        jbtdel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Script Manager");

        listscripts.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listscripts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listscripts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listscriptsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listscripts);

        jbtNew.setText("New");
        jbtNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtNewActionPerformed(evt);
            }
        });

        jbtSaveCompile.setText("Save and Compile");
        jbtSaveCompile.setToolTipText("Save the current script and then compile it");
        jbtSaveCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSaveCompileActionPerformed(evt);
            }
        });

        codearea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(codearea);

        jbtdel.setText("Delete");
        jbtdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtdelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtdel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtSaveCompile)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbtNew)
                            .addComponent(jbtSaveCompile)
                            .addComponent(jbtdel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listscriptsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listscriptsValueChanged
        if(listscripts.getSelectedIndex() > -1){
            String key = listscripts.getSelectedValue().toString();
            this.currentScript = key;
            File f = getFileFromKey(key);
            try {
                Scanner sc = new Scanner(f);
                String s = "";
                while(sc.hasNextLine()){
                    s += sc.nextLine()+"\n";
                }
                codearea.setText(s);
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_listscriptsValueChanged

    private void compileAll(){
        try {
            String abp = mainframe.getProjectAbsPath()+"/project";
            String jpt = abp+"/src/com";
            Runtime r = Runtime.getRuntime();
                    r.exec("cmd /c start cmd.exe /K \" "
                            + "javac -d \""+abp+"/bin\" -cp \""+abp+"/FF.jar;\" "+jpt+"/core/*.java "+jpt+"/scenes/*.java "+jpt+"/scripts/*.java \"");
                } catch (Exception ex) {
                    System.out.println(ex.toString());
                }
    }
    
    private void jbtNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNewActionPerformed
        mainframe.filechooser.setSelectedFile(new File(mainframe.getProjectAbsPath()+"/project/src/com/scripts/NewScript"));
        int n = mainframe.filechooser.showSaveDialog(null);
        if(n == JFileChooser.APPROVE_OPTION){
            File f = mainframe.filechooser.getSelectedFile();
            ScriptGenerator.getInstance().generateSimpleScriptChild(f.getName(), f.getParentFile());
            try {
                //Compile the project
                compileAll();
                //Hold for a while after the compile
                while(true){
                    Thread.sleep(3000);
                    break;
                }
               //After the wait, the new class is ready to be loaded                
                //Add the script
                entity.addScript(f.getName(), (Class<SimpleScript>)mainframe.classloader.loadClass("com.scripts."+f.getName()));
                
                //Refresh list
                initLists();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_jbtNewActionPerformed

    private void jbtSaveCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSaveCompileActionPerformed
        //Save the .java first!
        if(currentScript != null && !currentScript.equals("")){
            try {
            File f = getFileFromKey(currentScript);
            PrintWriter pw = new PrintWriter(f);
            pw.println(codearea.getText());
            pw.close();

            //Compile the .java to class
            compileAll();

            //Hold for a while after the compile
            while(true){
                Thread.sleep(3000);
                break;
            }

            //Remove the old instance of the class
            entity.getScripts().remove(currentScript);


            //Instantiate the new instance of the class
            entity.addScript(currentScript, (Class<SimpleScript>)mainframe.classloader.loadClass("com.scripts."+currentScript));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please choose the script first", "Script Manager", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbtSaveCompileActionPerformed

    private void jbtdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtdelActionPerformed
        entity.removeScript(currentScript);
        File f = getFileFromKey(currentScript);
        f.delete();
        initLists();
        codearea.setText("");
        currentScript="";
        JOptionPane.showMessageDialog(null, "Script deleted", "Script Manager", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jbtdelActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codearea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtNew;
    private javax.swing.JButton jbtSaveCompile;
    private javax.swing.JButton jbtdel;
    private javax.swing.JList listscripts;
    // End of variables declaration//GEN-END:variables
}
